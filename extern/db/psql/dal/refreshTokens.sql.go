// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refreshTokens.sql

package dal

import (
	"context"
	"time"
)

const refreshTokenCreate = `-- name: RefreshTokenCreate :exec
INSERT INTO refresh_tokens (
  id, user_id, expires_at
) VALUES (
  $1, $2, $3
)
`

func (q *Queries) RefreshTokenCreate(ctx context.Context, iD string, userID string, expiresAt time.Time) error {
	_, err := q.db.Exec(ctx, refreshTokenCreate, iD, userID, expiresAt)
	return err
}

const refreshTokenDelete = `-- name: RefreshTokenDelete :execrows
DELETE FROM refresh_tokens
WHERE id = $1
`

func (q *Queries) RefreshTokenDelete(ctx context.Context, id string) (int64, error) {
	result, err := q.db.Exec(ctx, refreshTokenDelete, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const refreshTokenDeleteFromUser = `-- name: RefreshTokenDeleteFromUser :execrows
DELETE FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) RefreshTokenDeleteFromUser(ctx context.Context, userID string) (int64, error) {
	result, err := q.db.Exec(ctx, refreshTokenDeleteFromUser, userID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const refreshTokenGet = `-- name: RefreshTokenGet :one
SELECT id, user_id, expires_at, created_at, updated_at
FROM refresh_tokenS rt
WHERE id = $1
AND user_id = $2
`

func (q *Queries) RefreshTokenGet(ctx context.Context, iD string, userID string) (*RefreshToken, error) {
	row := q.db.QueryRow(ctx, refreshTokenGet, iD, userID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
